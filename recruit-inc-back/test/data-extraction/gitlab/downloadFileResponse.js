module.exports =  "from random import randint, choice\nfrom .literals import OPERATOR_ADD, OPERATOR_SUB, OPERATOR_MUL, OPERATOR_DIV\n\n\ndef formula_generator(operation, digits_1=1, digits_2=1, range_1=None, range_2=None, even_1=False, even_2=False, big_endian=False):\n    if range_1:\n        low_limit_1, high_limit_1 = range_1\n    else:\n        low_limit_1 = 10 ** (digits_1 - 1)\n        high_limit_1 = 10 ** digits_1 - 1\n\n    if range_2:\n        low_limit_2, high_limit_2 = range_2\n    else:\n        low_limit_2 = 10 ** (digits_2 - 1)\n        high_limit_2 = 10 ** digits_2 - 1\n\n    if operation == OPERATOR_DIV and low_limit_2 == 0:\n        # Avoid generating a div by zero\n        low_limit_2 = 1\n\n    first_number = randint(low_limit_1, high_limit_1)\n    second_number = randint(low_limit_2, high_limit_2)\n\n    if even_1 and first_number % 2 != 0:\n        first_number += 1\n\n    if even_2 and second_number % 2 != 0:\n        second_number += 1\n\n    if big_endian and second_number > first_number:\n        return formula_generator(operation, digits_1, digits_2, range_1, range_2, even_1, even_2, big_endian)\n\n    if operation == OPERATOR_ADD:\n        return '%d + %d' % (first_number, second_number), str(first_number + second_number)\n    elif operation == OPERATOR_SUB:\n        return '%d - %d' % (first_number, second_number), str(first_number - second_number)\n    elif operation == OPERATOR_MUL:\n        return '%d * %d' % (first_number, second_number), str(first_number * second_number)\n    elif operation == OPERATOR_DIV:\n        return '%d / %d' % (first_number, second_number), str(first_number / second_number)\n"
